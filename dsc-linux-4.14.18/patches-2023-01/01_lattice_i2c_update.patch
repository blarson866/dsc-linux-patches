From 4aa4730aca244abc9cc6d2fde6624f6c71de4f3f Mon Sep 17 00:00:00 2001
From: David Clear <dac2@pensando.io>
Date: Mon, 23 Jan 2023 17:14:57 -0800
Subject: [PATCH] drivers/i2c: Lattice I2C driver update

* elba: Add cpld lattice i2c reset control

- Reset lattice master for i2c_busy set
- Add sysfs access to lattice master registers
- Fix statistics as multiple cmdstat bits can be set

* elba: Fix i2c_busy stuck port 1 affecting port 2

The rd1173 has two i2c masters whose interrupts are tied
together.  Fill out in the master_xfer which i2c adapter
the transfer is for so the irq handler knows which
master cmdstat to read.

Signed-off-by: David Clear <dac2@pensando.io>
---
 drivers/i2c/busses/i2c-rd1173.c | 229 +++++++++++++++++++-------------
 1 file changed, 139 insertions(+), 90 deletions(-)

diff --git a/drivers/i2c/busses/i2c-rd1173.c b/drivers/i2c/busses/i2c-rd1173.c
index f2f1cef7f212..4f68ff2535bc 100644
--- a/drivers/i2c/busses/i2c-rd1173.c
+++ b/drivers/i2c/busses/i2c-rd1173.c
@@ -1,7 +1,7 @@
 /*
  * Lattice RD1173 SPI to I2C bus interface driver
  *
- * Copyright (C) 2020 Pensando Systems, Inc.
+ * Copyright (C) 2020-2022 Pensando Systems, Inc.
  */
 
 #include <linux/gpio/consumer.h>
@@ -114,6 +114,7 @@ struct rd1173dev {
 	struct i2c_stats stats;
 	struct mutex xfer_active;
 	struct completion completion;
+	int active_port;
 };
 
 enum chiptype {
@@ -184,6 +185,67 @@ static const struct attribute_group i2c_attr_group = {
 	.attrs = i2c_attrs,
 };
 
+#define rd1173_show_simple(field, name, format_string, cast)		\
+static ssize_t								\
+show_##name(struct device *dev, struct device_attribute *attr,		\
+	    char *buf)							\
+{									\
+	struct spi_device *spi = to_spi_device(dev);			\
+	struct rd1173dev *rd1173dev = spi_get_drvdata(spi);		\
+	unsigned int val;						\
+									\
+	regmap_read(rd1173dev->regmap, field, &val);			\
+	return snprintf(buf, 20, format_string, cast val);		\
+}
+
+#define rd1173_store_simple(field, name, base)				\
+static ssize_t								\
+store_##name(struct device *dev, struct device_attribute *attr,		\
+	     const char *buf, size_t count)				\
+{									\
+	struct spi_device *spi = to_spi_device(dev);			\
+	struct rd1173dev *rd1173dev = spi_get_drvdata(spi);		\
+	unsigned long val;						\
+	int ret;							\
+									\
+	ret = kstrtoul(buf, base, &val);				\
+	if (ret) return ret;						\
+	regmap_write(rd1173dev->regmap, field, (unsigned int)val);	\
+	return count;							\
+}
+
+#define rd1173_attr_show(field, name, format_string, type)		\
+	rd1173_show_simple(field, name, format_string, (type))		\
+static DEVICE_ATTR(name, 0444, show_##name, NULL)
+
+#define rd1173_attr_rw(field, name, format_string, type)		\
+	rd1173_show_simple(field, name, format_string, (type))		\
+	rd1173_store_simple(field, name, 0)				\
+static DEVICE_ATTR(name, 0644, show_##name, store_##name)
+
+rd1173_attr_rw(RD1173_I2C0_CONFIG_REG, i2c0_cfg, "0x%02x\n", u32);
+rd1173_attr_rw(RD1173_I2C1_CONFIG_REG, i2c1_cfg, "0x%02x\n", u32);
+rd1173_attr_show(RD1173_I2C0_MODE_REG, i2c0_mode, "0x%02x\n", u32);
+rd1173_attr_show(RD1173_I2C1_MODE_REG, i2c1_mode, "0x%02x\n", u32);
+rd1173_attr_show(RD1173_I2C0_CMD_STAT_REG, i2c0_cmdstat, "0x%02x\n", u32);
+rd1173_attr_show(RD1173_I2C1_CMD_STAT_REG, i2c1_cmdstat, "0x%02x\n", u32);
+rd1173_attr_show(RD1173_FIFO_STATUS_REG, i2c_fifo_status, "0x%02x\n", u32);
+
+static struct attribute *rd1173_attrs[] = {
+	&dev_attr_i2c0_cfg.attr,
+	&dev_attr_i2c1_cfg.attr,
+	&dev_attr_i2c0_mode.attr,
+	&dev_attr_i2c1_mode.attr,
+	&dev_attr_i2c0_cmdstat.attr,
+	&dev_attr_i2c1_cmdstat.attr,
+	&dev_attr_i2c_fifo_status.attr,
+	NULL,
+};
+
+static const struct attribute_group rd1173_attr_group = {
+	.attrs = rd1173_attrs,
+};
+
 static bool rd1173_writeable_reg(struct device *dev, unsigned int reg)
 {
 	switch (reg) {
@@ -214,36 +276,30 @@ static irqreturn_t rd1173_irq_handler(int this_irq, void *data)
 	struct rd1173dev *rd1173dev = data;
 	struct rd1173_i2c_adapter *i2c0 = &rd1173dev->i2c_adap[0];
 	struct rd1173_i2c_adapter *i2c1 = &rd1173dev->i2c_adap[1];
-	struct rd1173_i2c_adapter *i2c;
-	int state;
 	int rc;
 
-	/* Check both masters */
-	rc = regmap_read(rd1173dev->regmap,
-			 i2c0->offset + RD1173_CMD_STAT_REG,
-			 &i2c0->state);
-	if (rc)
-		return IRQ_NONE;
-
-	rc = regmap_read(rd1173dev->regmap,
-			 i2c1->offset + RD1173_CMD_STAT_REG,
-			 &i2c1->state);
-	if (rc)
-		return IRQ_NONE;
-
-	if (i2c0->state) {
-		i2c = i2c0;
-		state = i2c0->state;
-	} else if (i2c1->state) {
-		i2c = i2c1;
-		state = i2c1->state;
-	} else {
-		return IRQ_NONE;
-	}
+	if (rd1173dev->active_port == 1) {
+		rc = regmap_read(rd1173dev->regmap,
+				 i2c0->offset + RD1173_CMD_STAT_REG,
+				 &i2c0->state);
+		if (rc)
+			return IRQ_NONE;
 
-	if (state == RD1173_STAT_TS) {
-		complete(&i2c->rd1173dev->completion);
-		return IRQ_HANDLED;
+		if (i2c0->state & RD1173_STAT_TS) {
+			complete(&i2c0->rd1173dev->completion);
+			return IRQ_HANDLED;
+		}
+	} else if (rd1173dev->active_port == 2) {
+		rc = regmap_read(rd1173dev->regmap,
+				 i2c1->offset + RD1173_CMD_STAT_REG,
+				 &i2c1->state);
+		if (rc)
+			return IRQ_NONE;
+
+		if (i2c1->state & RD1173_STAT_TS) {
+			complete(&i2c1->rd1173dev->completion);
+			return IRQ_HANDLED;
+		}
 	}
 	return IRQ_NONE;
 }
@@ -313,6 +369,9 @@ static int rd1173_reset(struct rd1173_i2c_adapter *i2c)
 	int enable = RD1173_MODE_TX_IE | RD1173_MODE_RX_IE;
 	int rc;
 
+	dev_dbg(dev, "rd1173 i2c%d reset, cmdstat 0x%x\n",
+		i2c->i2c_adap.nr - 1, i2c->state);
+
 	/* Assert reset */
 	rc = regmap_update_bits(i2c->rd1173dev->regmap,
 				i2c->offset + RD1173_CONFIG_REG,
@@ -477,57 +536,32 @@ static void update_i2c_stats(struct rd1173_i2c_adapter *i2c, int readop)
 		    i2c->offset + RD1173_CMD_STAT_REG,
 		    &i2c->state);
 
-	switch(i2c->state) {
-	case RD1173_STAT_TS:
-		if (i2c->i2c_master) {
-			if (readop)
-				stats->i2c1_rx_complete++;
-			else
-				stats->i2c1_tx_complete++;
-		} else {
-			if (readop)
-				stats->i2c0_rx_complete++;
-			else
-				stats->i2c0_tx_complete++;
-		}
-		break;
-	case RD1173_STAT_I2C_BUSY:
-		if (i2c->i2c_master)
-			stats->i2c1_busy++;
-		else
-			stats->i2c0_busy++;
-		break;
-	case RD1173_STAT_NO_ANS:
+	if (i2c->state & RD1173_STAT_TS) {
 		if (i2c->i2c_master)
-			stats->i2c1_no_answer++;
+			readop ? stats->i2c1_rx_complete++ :
+				 stats->i2c1_tx_complete++;
 		else
-			stats->i2c0_no_answer++;
-		break;
-	case RD1173_STAT_NO_ACK:
-		if (i2c->i2c_master)
-			stats->i2c1_no_ack++;
-		else
-			stats->i2c0_no_ack++;
-		break;
-	case RD1173_STAT_TX_ERR:
-		if (i2c->i2c_master)
-			stats->i2c1_tx_error++;
-		else
-			stats->i2c0_tx_error++;
-		break;
-	case RD1173_STAT_RX_ERR:
-		if (i2c->i2c_master)
-			stats->i2c1_rx_error++;
-		else
-			stats->i2c0_rx_error++;
-		break;
-	case RD1173_STAT_ABORT_ACK:
-		if (i2c->i2c_master)
-			stats->i2c1_abort_ack++;
-		else
-			stats->i2c0_abort_ack++;
-		break;
+			readop ? stats->i2c0_rx_complete++ :
+				 stats->i2c0_tx_complete++;
 	}
+	if (i2c->state & RD1173_STAT_I2C_BUSY)
+		i2c->i2c_master ? stats->i2c1_busy++ :
+				  stats->i2c0_busy++;
+	if (i2c->state & RD1173_STAT_NO_ANS)
+		i2c->i2c_master ? stats->i2c1_no_answer++ :
+				  stats->i2c0_no_answer++;
+	if (i2c->state & RD1173_STAT_NO_ACK)
+		i2c->i2c_master ? stats->i2c1_no_ack++ :
+				  stats->i2c0_no_ack++;
+	if (i2c->state & RD1173_STAT_TX_ERR)
+		i2c->i2c_master ? stats->i2c1_tx_error++ :
+				  stats->i2c0_tx_error++;
+	if (i2c->state & RD1173_STAT_RX_ERR)
+		i2c->i2c_master ? stats->i2c1_rx_error++ :
+				  stats->i2c0_rx_error++;
+	if (i2c->state & RD1173_STAT_ABORT_ACK)
+		i2c->i2c_master ? stats->i2c1_abort_ack++ :
+				  stats->i2c0_abort_ack++;
 }
 
 /**
@@ -565,14 +599,16 @@ static int rd1173_xfer(struct i2c_adapter *i2c_adap, struct i2c_msg *msgs, int n
 			if (msgs[i].len > max_len)
 				return -EOPNOTSUPP;
 		}
-		dev_dbg(dev, "msgs[%d]: addr 0x%x flags 0x%x len %d\n",
-			i, msgs[i].addr, msgs[i].flags, msgs[i].len);
+		dev_dbg(dev, "i2c%d msgs[%d]: addr 0x%x flags 0x%x len %d\n",
+			i2c->i2c_adap.nr - 1, i, msgs[i].addr, msgs[i].flags,
+			msgs[i].len);
 	}
 
 	if (mutex_lock_interruptible(&i2c->rd1173dev->xfer_active))
 		return -ERESTARTSYS;
 
 	reinit_completion(&i2c->rd1173dev->completion);
+	i2c->rd1173dev->active_port = i2c->i2c_adap.nr;
 
 	for (i = 0; i < num; i++) {
 		rd1173_fifo_clear(i2c);
@@ -591,16 +627,27 @@ static int rd1173_xfer(struct i2c_adapter *i2c_adap, struct i2c_msg *msgs, int n
 			else
 				cnt = bytes_remaining;
 
-			if (msgs[i].flags & I2C_M_RD)
+			if (msgs[i].flags & I2C_M_RD) {
+				dev_dbg(dev, "i2c%d read addr 0x%x len %d\n",
+					i2c->i2c_adap.nr - 1, msgs[i].addr,
+					msgs[i].len);
 				rc = rd1173_read(i2c, &msgs[i], cnt);
-			else
+			} else {
+				dev_dbg(dev, "i2c%d write addr 0x%x len %d\n",
+					i2c->i2c_adap.nr - 1, msgs[i].addr,
+					msgs[i].len);
 				rc = rd1173_write(i2c, &msgs[i], cnt);
+			}
 
 			rc = wait_for_completion_timeout(&i2c->rd1173dev->completion,
-				i2c->i2c_adap.timeout);
+							 i2c->i2c_adap.timeout);
 
 			update_i2c_stats(i2c, msgs[i].flags & I2C_M_RD);
 
+			if (!rc && i2c->state != RD1173_STAT_TS)
+				dev_dbg(dev, "i2c%d cmdstat 0x%02x\n",
+					i2c->i2c_adap.nr - 1, i2c->state);
+
 			if (!rc || i2c->state != RD1173_STAT_TS)
 				goto done;
 
@@ -625,6 +672,7 @@ static int rd1173_xfer(struct i2c_adapter *i2c_adap, struct i2c_msg *msgs, int n
 		rc = num;        /* transfer complete */
 		break;
 	case RD1173_STAT_I2C_BUSY:
+		rd1173_reset(i2c);
 		rc = -EAGAIN;
 		break;
 	case RD1173_STAT_NO_ANS:
@@ -642,6 +690,7 @@ static int rd1173_xfer(struct i2c_adapter *i2c_adap, struct i2c_msg *msgs, int n
 		rc = -EAGAIN;
 	}
 
+	i2c->rd1173dev->active_port = 0;
 	mutex_unlock(&i2c->rd1173dev->xfer_active);
 	return rc;
 }
@@ -663,10 +712,8 @@ static int rd1173_probe(struct spi_device *spi)
 	int i, rc;
 
 	rd1173dev = devm_kzalloc(&spi->dev, sizeof(*rd1173dev), GFP_KERNEL);
-	if (!rd1173dev) {
-		dev_err(&spi->dev, "No memory %d\n", -ENOMEM);
+	if (!rd1173dev)
 		return -ENOMEM;
-	}
 
 	spi_set_drvdata(spi, rd1173dev);
 	init_completion(&rd1173dev->completion);
@@ -741,16 +788,18 @@ static int rd1173_probe(struct spi_device *spi)
 		if (rc) {
 			dev_err(&spi->dev, "error adding i2c adapter: %d\n", rc);
 			return rc;
-		} else {
-			dev_info(&spi->dev, "registered I2C bus number %d\n",
-				 i2c->i2c_adap.nr);
 		}
+		dev_info(&spi->dev, "registered I2C bus number %d\n",
+			 i2c->i2c_adap.nr);
 	}
 
 	rc = sysfs_create_group(&spi->dev.kobj, &i2c_attr_group);
-	if (rc) {
-		dev_warn(&spi->dev, "failed to create sysfs files\n");
-	}
+	if (rc)
+		dev_warn(&spi->dev, "failed to create i2c sysfs files\n");
+
+	rc = sysfs_create_group(&spi->dev.kobj, &rd1173_attr_group);
+	if (rc)
+		dev_warn(&spi->dev, "failed to create rd1173 sysfs files\n");
 
 	return 0;
 }
-- 
2.17.1

