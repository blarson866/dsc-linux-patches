From e5aa5fbaa9bd1b928bcb449711e86129c6aabf12 Mon Sep 17 00:00:00 2001
From: David Clear <dac2@pensando.io>
Date: Thu, 26 Jan 2023 09:38:02 -0800
Subject: [PATCH] driver/soc/pensnado: cap_pcie: refactor pciep_regrd32

Refactor the pciep_regrd32() api to make it easier to use from other
kernel drivers. The function can be used by kpcimgr to make controlled
accesses to pcie registers that might generate SErrors we want to ignore.

Signed-off-by: David Clear <dac2@pensando.io>
---
 drivers/soc/pensando/cap_pcie.c    | 51 +++++++++++++++++++-----------
 drivers/soc/pensando/penpcie_dev.h |  4 ++-
 2 files changed, 35 insertions(+), 20 deletions(-)

diff --git a/drivers/soc/pensando/cap_pcie.c b/drivers/soc/pensando/cap_pcie.c
index 8cbd67afd040..f3dc0a11242a 100644
--- a/drivers/soc/pensando/cap_pcie.c
+++ b/drivers/soc/pensando/cap_pcie.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019-2021, Pensando Systems Inc.
+ * Copyright (c) 2019-2022, Pensando Systems Inc.
  */
 
 #include <linux/types.h>
@@ -104,23 +104,26 @@ static void pciep_access_begin(const u64 pciepa)
 static int pciep_access_end(void)
 {
 	struct pciedev_info *pi = &pciedev_info;
+
+	if (pi->pciep_access_error) {
+		pr_info_ratelimited("pcie access serror: address 0x%llx\n",
+				    pi->pciep_access_address);
+	}
 	pi->pciep_access_address = 0;
 	return pi->pciep_access_error;
 }
 
-static int pciep_valid_rw(struct pcie_rw *rw)
+static int pciep_valid_pa(const uint64_t pciepa, const uint32_t size)
 {
 	struct pciedev_info *pi = &pciedev_info;
 
 	if (!pi->pcieva)
 		return -ENXIO;
-	if (rw->pciepa < pi->pcie_base ||
-	    rw->pciepa > pi->pcie_base + pi->pcie_size ||
-	    rw->size > pi->pcie_size ||
-	    rw->pciepa + rw->size > pi->pcie_base + pi->pcie_size)
+	if (pciepa < pi->pcie_base ||
+	    pciepa > pi->pcie_base + pi->pcie_size ||
+	    size > pi->pcie_size ||
+	    pciepa + size > pi->pcie_base + pi->pcie_size)
 		return -ERANGE;
-	if (rw->size != sizeof(u32))
-		return -EINVAL;
 	return 0;
 }
 
@@ -137,42 +140,52 @@ static int pciep_valid_rw(struct pcie_rw *rw)
  * event during our pcie register access and return failure to the
  * caller, but the system continues.
  */
-static long pciep_regrd(struct pcie_rw *rw)
+int pciep_regrd32(const uint64_t pciepa, uint32_t *val)
 {
 	struct pciedev_info *pi = &pciedev_info;
-	uint32_t v;
 	int r;
+	unsigned long flags;
 
-	r = pciep_valid_rw(rw);
-	if (r) return r;
+	r = pciep_valid_pa(pciepa, sizeof(u32));
+	if (r)
+		return r;
 
-	spin_lock(&pi->pciep_access_lock);
-	pciep_access_begin(rw->pciepa);
+	spin_lock_irqsave(&pi->pciep_access_lock, flags);
+	pciep_access_begin(pciepa);
 
-	v = pcie_readl(rw->pciepa);
+	*val = pcie_readl(pciepa);
 	local_async_enable();	/* unmask async SError */
 	dsb(sy);		/* sync in-flight ld/st */
 	isb();
 
 	r = pciep_access_end();
-	spin_unlock(&pi->pciep_access_lock);
-	if (r) return -EIO;
+	spin_unlock_irqrestore(&pi->pciep_access_lock, flags);
+	if (r)
+		return -EIO;
 
-	return copy_to_user(rw->rdvalp, &v, sizeof(v));
+	return 0;
 }
+EXPORT_SYMBOL_GPL(pciep_regrd32);
 
 static long pcie_unlocked_ioctl(struct file *file,
 		unsigned int cmd, unsigned long arg)
 {
 	void __user *p = (void __user *)arg;
 	struct pcie_rw rw;
+	uint32_t val;
+	int r;
 
 	switch (cmd) {
 
 	case PCIE_PCIEP_REGRD:
 		if (copy_from_user(&rw, p, sizeof(rw)))
 			return -EFAULT;
-		return pciep_regrd(&rw);
+		if (rw.size != sizeof(u32))
+			return -EINVAL;
+		r = pciep_regrd32(rw.pciepa, &val);
+		if (r)
+			return r;
+		return copy_to_user(rw.rdvalp, &val, sizeof(val));
 
 	default:
 		return -ENOTTY;
diff --git a/drivers/soc/pensando/penpcie_dev.h b/drivers/soc/pensando/penpcie_dev.h
index 49d1bbe85877..9c27482b5826 100644
--- a/drivers/soc/pensando/penpcie_dev.h
+++ b/drivers/soc/pensando/penpcie_dev.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, Pensando Systems Inc.
+ * Copyright (c) 2020-2022, Pensando Systems Inc.
  */
 
 #ifndef __PENPCIE_DEV_H__
@@ -20,4 +20,6 @@ struct pcie_rw {
 #define PCIE_IOCTL_NUM		'P'
 #define PCIE_PCIEP_REGRD	_IOWR(PCIE_IOCTL_NUM, 1, struct pcie_rw)
 
+int pciep_regrd32(const uint64_t pciepa, uint32_t *val);
+
 #endif
-- 
2.17.1

