From 2eb2d5500256bd43fd6d3854e491941d63b8869d Mon Sep 17 00:00:00 2001
From: Brad Larson <bradley.larson@amd.com>
Date: Wed, 2 Apr 2025 12:20:03 -0700
Subject: [PATCH 16/17] arm64: Enable platform SError handler

Signed-off-by: Brad Larson <bradley.larson@amd.com>
---
 arch/arm64/include/asm/traps.h | 1 +
 arch/arm64/kernel/traps.c      | 8 ++++++++
 2 files changed, 9 insertions(+)

diff --git a/arch/arm64/include/asm/traps.h b/arch/arm64/include/asm/traps.h
index eefe766d6161..15adf39e71c1 100644
--- a/arch/arm64/include/asm/traps.h
+++ b/arch/arm64/include/asm/traps.h
@@ -27,6 +27,7 @@ void arm64_notify_segfault(unsigned long addr);
 void arm64_force_sig_fault(int signo, int code, unsigned long far, const char *str);
 void arm64_force_sig_mceerr(int code, unsigned long far, short lsb, const char *str);
 void arm64_force_sig_ptrace_errno_trap(int errno, unsigned long far, const char *str);
+int platform_serror(struct pt_regs *regs, unsigned int esr);
 
 int early_brk64(unsigned long addr, unsigned long esr, struct pt_regs *regs);
 
diff --git a/arch/arm64/kernel/traps.c b/arch/arm64/kernel/traps.c
index 215e6d7f2df8..fae256ffb2a7 100644
--- a/arch/arm64/kernel/traps.c
+++ b/arch/arm64/kernel/traps.c
@@ -951,8 +951,16 @@ bool arm64_is_fatal_ras_serror(struct pt_regs *regs, unsigned long esr)
 	}
 }
 
+int __weak platform_serror(struct pt_regs *regs, unsigned int esr)
+{
+	return 0;
+}
+
 void do_serror(struct pt_regs *regs, unsigned long esr)
 {
+	if (platform_serror(regs, esr))
+		return;
+
 	/* non-RAS errors are not containable */
 	if (!arm64_is_ras_serror(esr) || arm64_is_fatal_ras_serror(regs, esr))
 		arm64_serror_panic(regs, esr);
-- 
2.25.1

