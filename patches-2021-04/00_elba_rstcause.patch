From 7992dd8584d0fca096b789a34f3359772ab5bb49 Mon Sep 17 00:00:00 2001
From: David Clear <dac2@pensando.io>
Date: Mon, 3 May 2021 15:47:19 -0700
Subject: [PATCH] drivers/soc/pensnado: Add reset cause driver

The reset cause driver provides an bitmap of events (both internally
generated and externally) that can be used to determine the cause of
the last reboot.

The events themselve are board-specific and are decoded by userspace
libraries.

Signed-off-by: David Clear <dac2@pensando.io>
---
 arch/arm64/boot/dts/pensando/elba.dtsi |  12 +-
 drivers/soc/pensando/Makefile          |   3 +-
 drivers/soc/pensando/cap_bsm.c         |   7 +-
 drivers/soc/pensando/cap_pcie.c        |   3 +
 drivers/soc/pensando/cap_rstcause.c    | 216 +++++++++++++++++++++++++
 drivers/soc/pensando/cap_rstcause.h    |  15 ++
 drivers/soc/pensando/cap_soc.c         |  25 +++
 7 files changed, 277 insertions(+), 4 deletions(-)
 create mode 100644 drivers/soc/pensando/cap_rstcause.c
 create mode 100644 drivers/soc/pensando/cap_rstcause.h
 create mode 100644 drivers/soc/pensando/cap_soc.c

diff --git a/arch/arm64/boot/dts/pensando/elba.dtsi b/arch/arm64/boot/dts/pensando/elba.dtsi
index a7b7a01ce40d..45b573e44c86 100644
--- a/arch/arm64/boot/dts/pensando/elba.dtsi
+++ b/arch/arm64/boot/dts/pensando/elba.dtsi
@@ -52,6 +52,11 @@
 				IRQ_TYPE_LEVEL_LOW)>;
 	};
 
+	rstcause {
+		compatible = "pensando,rstcause";
+		pensando,causeregs = <&mssoc 0x2084>;
+	};
+
 	soc {
 		compatible = "simple-bus";
 		#address-cells = <2>;
@@ -288,7 +293,7 @@
 			cdns,phy-input-delay-sd-uhs-ddr50 = <0x16>;
 			cdns,mmc-ddr-1_8v;
 			status = "disabled";
-		} ;
+		};
 
 		pcie {
 			compatible = "pensando,pcie";
@@ -302,6 +307,11 @@
 			status = "disabled";
 		};
 
+		mssoc: mssoc@307c0000 {
+			compatible = "pensando,mssoc", "syscon";
+			reg = <0x0 0x307c0000 0x0 0x3000>;
+		};
+
 		bsm {
 			compatible = "pensando,bsm";
 			reg = <0x0 0x307c2080 0x0 0x4>;
diff --git a/drivers/soc/pensando/Makefile b/drivers/soc/pensando/Makefile
index 9123909977ac..25232a5f93bd 100644
--- a/drivers/soc/pensando/Makefile
+++ b/drivers/soc/pensando/Makefile
@@ -1,7 +1,8 @@
 #
 # Pensando SoC drivers
 #
+obj-y += cap_soc.o
 obj-$(CONFIG_PENSANDO_SOC_CAPMEM) += cap_mem.o
-obj-$(CONFIG_PENSANDO_SOC_PCIE) += cap_pcie.o cap_reboot.o
+obj-$(CONFIG_PENSANDO_SOC_PCIE) += cap_pcie.o cap_reboot.o cap_rstcause.o
 obj-$(CONFIG_PENSANDO_SOC_CRASH) += cap_crash.o
 obj-$(CONFIG_PENSANDO_SOC_BSM) += cap_bsm.o
diff --git a/drivers/soc/pensando/cap_bsm.c b/drivers/soc/pensando/cap_bsm.c
index c685ce146159..4daecc99f6a2 100644
--- a/drivers/soc/pensando/cap_bsm.c
+++ b/drivers/soc/pensando/cap_bsm.c
@@ -1,6 +1,6 @@
 
 /*
- * Copyright (c) 2019, Pensando Systems Inc.
+ * Copyright (c) 2019-2021, Pensando Systems Inc.
  */
 
 #include <linux/export.h>
@@ -10,6 +10,8 @@
 #include <linux/io.h>
 #include "bsm_dev.h"
 
+extern struct kobject *pensando_fw_kobj_get(void);
+
 struct bsm {
 	void __iomem *base;
 	uint32_t val;
@@ -82,7 +84,7 @@ static int bsm_probe(struct platform_device *pdev)
 		/* bsm not in device-tree */
 		return -ENODEV;
 	}
-	pensando_kobj = kobject_create_and_add("pensando", firmware_kobj);
+	pensando_kobj = pensando_fw_kobj_get();
 	if (!pensando_kobj)
 		return -ENOMEM;
 	for (i = 0; i < ARRAY_SIZE(bsm_attrs); i++) {
@@ -95,6 +97,7 @@ static int bsm_probe(struct platform_device *pdev)
 	r = sysfs_create_link(pensando_kobj, &pdev->dev.kobj, "bsm");
 	if (r) {
 		pr_err("failed to create sysfs symlink\n");
+		kobject_put(pensando_kobj);
 		return r;
 	}
 	return 0;
diff --git a/drivers/soc/pensando/cap_pcie.c b/drivers/soc/pensando/cap_pcie.c
index c4cef566ae13..b5ea9fa7a668 100644
--- a/drivers/soc/pensando/cap_pcie.c
+++ b/drivers/soc/pensando/cap_pcie.c
@@ -18,6 +18,7 @@
 #include <linux/fs.h>
 #include <asm/traps.h>
 #include "cap_reboot.h"
+#include "cap_rstcause.h"
 #include "penpcie_dev.h"
 #include "cap_pcie_elba.h"
 
@@ -287,6 +288,8 @@ static long pcie_panic_blink(int state)
 		while ((port = pcie_poll_for_hostdn()) < 0)
 			continue;
 		printk(PFX "port %d hostdn\n", port);
+		/* reflect the pcie reset state in the reset cause */
+		cap_rstcause_set(CAP_RSTCAUSE_EV_PCIE_RESET);
 	}
 	reset();
 
diff --git a/drivers/soc/pensando/cap_rstcause.c b/drivers/soc/pensando/cap_rstcause.c
new file mode 100644
index 000000000000..7a2d8d3478ff
--- /dev/null
+++ b/drivers/soc/pensando/cap_rstcause.c
@@ -0,0 +1,216 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Pensando restart cause driver
+ *
+ * Copyright (c) 2021, Pensando Systems Inc.
+ */
+
+#include <linux/kobject.h>
+#include <linux/string.h>
+#include <linux/kernel.h>
+#include <linux/sysfs.h>
+#include <linux/export.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/init.h>
+#include <linux/reboot.h>
+#include <linux/mfd/syscon.h>
+#include <linux/regmap.h>
+#include "cap_rstcause.h"
+
+struct kobject *pensando_fw_kobj_get(void);
+
+struct cap_rstdev {
+	struct platform_device *pdev;
+	struct regmap *regs;
+	unsigned int regs_offset;
+	u32 this_cause;
+	struct notifier_block panic_nb;
+	struct notifier_block reboot_nb;
+	struct kobject *pensando_kobj;
+};
+
+static struct cap_rstdev *g_rdev;
+
+static inline u32 read_cause_reg(struct cap_rstdev *rdev)
+{
+	u32 val;
+
+	regmap_read(rdev->regs, rdev->regs_offset, &val);
+	return val;
+}
+
+static inline u32 read_next_cause_reg(struct cap_rstdev *rdev)
+{
+	u32 val;
+
+	regmap_read(rdev->regs, rdev->regs_offset + 4, &val);
+	return val;
+}
+
+static inline void set_next_cause_reg(struct cap_rstdev *rdev, u32 mask)
+{
+	regmap_update_bits(rdev->regs, rdev->regs_offset + 4, mask, ~0U);
+}
+
+void cap_rstcause_set(u32 mask)
+{
+	if (g_rdev)
+		set_next_cause_reg(g_rdev, mask);
+}
+EXPORT_SYMBOL_GPL(cap_rstcause_set);
+
+static int rstcause_reboot_handler(struct notifier_block *this,
+				   unsigned long code, void *unused)
+{
+	cap_rstcause_set(CAP_RSTCAUSE_EV_REBOOT);
+	return NOTIFY_OK;
+}
+
+static int rstcause_panic_handler(struct notifier_block *this,
+				  unsigned long code, void *unused)
+{
+	cap_rstcause_set(CAP_RSTCAUSE_EV_PANIC);
+	return NOTIFY_OK;
+}
+
+static ssize_t this_cause_show(struct device *dev,
+			       struct device_attribute *attr, char *buf)
+{
+	struct cap_rstdev *rdev;
+
+	rdev = platform_get_drvdata(to_platform_device(dev));
+	return sprintf(buf, "0x%08x\n", rdev->this_cause);
+}
+
+static DEVICE_ATTR_RO(this_cause);
+
+static ssize_t next_cause_show(struct device *dev,
+			       struct device_attribute *attr, char *buf)
+{
+	struct cap_rstdev *rdev;
+
+	rdev = platform_get_drvdata(to_platform_device(dev));
+	return sprintf(buf, "0x%08x\n", read_next_cause_reg(rdev));
+}
+
+static ssize_t next_cause_store(struct device *dev,
+				struct device_attribute *attr, const char *buf,
+				size_t count)
+{
+	struct cap_rstdev *rdev;
+	unsigned long val;
+
+	rdev = platform_get_drvdata(to_platform_device(dev));
+	if (kstrtoul(buf, 0, &val) < 0)
+		return -EINVAL;
+	if (val)
+		set_next_cause_reg(rdev, val);
+
+	return count;
+}
+
+static DEVICE_ATTR_RW(next_cause);
+
+static const struct device_attribute *rstcause_attrs[] = {
+	&dev_attr_this_cause,
+	&dev_attr_next_cause,
+};
+
+static int rstcause_probe(struct platform_device *pdev)
+{
+	struct of_phandle_args args;
+	struct cap_rstdev *rdev;
+	struct regmap *regs;
+	int r, i;
+
+	if (g_rdev)
+		return -ENODEV;
+
+	r = of_parse_phandle_with_fixed_args(pdev->dev.of_node,
+					     "pensando,causeregs", 1, 0, &args);
+	if (r) {
+		dev_err(&pdev->dev, "could not find causeregs\n");
+		return r;
+	}
+
+	regs = syscon_node_to_regmap(args.np);
+	if (IS_ERR(regs)) {
+		dev_err(&pdev->dev, "could not map causeregs\n");
+		return PTR_ERR(regs);
+	}
+
+	rdev = devm_kzalloc(&pdev->dev, sizeof(*rdev), GFP_KERNEL);
+	if (!rdev)
+		return -ENOMEM;
+	rdev->pdev = pdev;
+	platform_set_drvdata(pdev, rdev);
+
+	rdev->regs = regs;
+	rdev->regs_offset = args.args[0];
+	rdev->reboot_nb.notifier_call = rstcause_reboot_handler;
+	register_reboot_notifier(&rdev->reboot_nb);
+
+	rdev->panic_nb.notifier_call = rstcause_panic_handler;
+	atomic_notifier_chain_register(&panic_notifier_list, &rdev->panic_nb);
+
+	rdev->this_cause = read_cause_reg(rdev);
+
+	g_rdev = rdev;
+
+	rdev->pensando_kobj = pensando_fw_kobj_get();
+	if (rdev->pensando_kobj) {
+		for (i = 0; i < ARRAY_SIZE(rstcause_attrs); i++) {
+			r = device_create_file(&pdev->dev, rstcause_attrs[i]);
+			if (r) {
+				dev_err(&pdev->dev,
+					"failed to create sysfs file\n");
+				return r;
+			}
+		}
+		r = sysfs_create_link(rdev->pensando_kobj,
+				      &pdev->dev.kobj, "rstcause");
+		if (r) {
+			dev_err(&pdev->dev, "failed to create sysfs symlink\n");
+			kobject_put(rdev->pensando_kobj);
+			rdev->pensando_kobj = NULL;
+		}
+	}
+	return 0;
+}
+
+static int rstcause_remove(struct platform_device *pdev)
+{
+	struct cap_rstdev *rdev = platform_get_drvdata(pdev);
+
+	unregister_reboot_notifier(&rdev->reboot_nb);
+	atomic_notifier_chain_unregister(&panic_notifier_list,
+					 &rdev->panic_nb);
+	if (g_rdev == rdev) {
+		g_rdev = NULL;
+		if (rdev->pensando_kobj)
+			kobject_put(rdev->pensando_kobj);
+	}
+
+	return 0;
+}
+
+static const struct of_device_id rstcause_of_match[] = {
+	{.compatible = "pensando,rstcause"},
+	{ /* end of table */ }
+};
+
+static struct platform_driver rstcause_driver = {
+	.probe = rstcause_probe,
+	.remove = rstcause_remove,
+	.driver = {
+		   .name = "pensando-rstcause",
+		   .owner = THIS_MODULE,
+		   .of_match_table = rstcause_of_match,
+		   },
+};
+
+module_platform_driver(rstcause_driver);
+MODULE_DESCRIPTION("Pensando SoC Reset Cause Driver");
+MODULE_LICENSE("GPL");
diff --git a/drivers/soc/pensando/cap_rstcause.h b/drivers/soc/pensando/cap_rstcause.h
new file mode 100644
index 000000000000..12fe87164792
--- /dev/null
+++ b/drivers/soc/pensando/cap_rstcause.h
@@ -0,0 +1,15 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (c) 2021, Pensando Systems Inc.
+ */
+
+#ifndef __CAP_RSTCAUSE_H__
+#define __CAP_RSTCAUSE_H__
+
+#define CAP_RSTCAUSE_EV_REBOOT		BIT(0)
+#define CAP_RSTCAUSE_EV_PANIC		BIT(1)
+#define CAP_RSTCAUSE_EV_PCIE_RESET	BIT(2)
+
+void cap_rstcause_set(u32 mask);
+
+#endif
diff --git a/drivers/soc/pensando/cap_soc.c b/drivers/soc/pensando/cap_soc.c
new file mode 100644
index 000000000000..0899fa880dba
--- /dev/null
+++ b/drivers/soc/pensando/cap_soc.c
@@ -0,0 +1,25 @@
+/*
+ * Copyright (c) 2021, Pensando Systems Inc.
+ */
+
+#include <linux/spinlock.h>
+#include <linux/export.h>
+#include <linux/kobject.h>
+
+static struct kobject *pensando_fw_kobj;
+
+/*
+ * Creates a new pensando sysfs node if it does not exists. The kobj is
+ * returned after incrementing the refcnt, so a module should use kobject_put()
+ * when it is done using this koject.
+ */
+struct kobject *pensando_fw_kobj_get(void)
+{
+	if (!pensando_fw_kobj) {
+		pensando_fw_kobj = kobject_create_and_add("pensando", firmware_kobj);
+		if (!pensando_fw_kobj)
+			return NULL;
+	}
+	return kobject_get(pensando_fw_kobj);
+}
+EXPORT_SYMBOL_GPL(pensando_fw_kobj_get);
-- 
2.17.1

